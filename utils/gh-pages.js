/**
 * auto generated by Github Copilot according to the answer from [git - html export different branch - Stack Overflow](https://stackoverflow.com/questions/9965884/html-export-different-branch)
 */
const { execSync } = require("child_process");
const { existsSync } = require("fs");
const { join, resolve } = require("path");

const DEFAULT_BRANCH = "gh-pages";

function usage() {
  console.log(`Usage: node ${process.argv[1]} [options] [--] <path_to_exported_html_files>

Arguments:

  -h, --help
    Display this usage message and exit.

  -b <branch>, --branch=<branch>, --branch <branch>
    Commit the files to the given branch.  If the branch doesn't
    exist, a new root (parentless) commit is created.
    Defaults to: ${DEFAULT_BRANCH}

  --
    Treat the remaining arguments as path names.  Useful if the path
    name might begin with '-'.

  <path_to_exported_html_files>
    Directory containing the html files exported by org-mode.  If the
    path begins with '-', it will be treated as an option unless it
    comes after the '--' option.`);
}

function log(...args) {
  console.log(...args);
}

function warn(...args) {
  console.warn("WARNING:", ...args);
}

function error(...args) {
  console.error("ERROR:", ...args);
}

function fatal(...args) {
  error(...args);
  process.exit(1);
}

function tryExec(cmd) {
  try {
    return execSync(cmd, { stdio: "inherit" });
  } catch (err) {
    fatal(`'${cmd}' failed: ${err.message}`);
  }
}

function main() {
  let branch = DEFAULT_BRANCH;
  let dir;

  // parse options
  for (let i = 2; i < process.argv.length; i++) {
    const arg = process.argv[i];
    switch (arg) {
      case "-h":
      case "--help":
        usage();
        process.exit(0);
        break;
      case "-b":
      case "--branch":
        branch = process.argv[++i];
        break;
      case "--branch=*":
        branch = arg.slice("--branch=".length);
        break;
      case "--":
        i++;
        break;
      default:
        if (arg.startsWith("-")) {
          usage();
          process.exit(1);
        } else {
          dir = resolve(process.cwd(), arg);
          i++;
        }
        break;
    }
  }

  if (!dir) {
    usage();
    process.exit(1);
  }

  if (!existsSync(dir)) {
    fatal(`${dir} is not a directory`);
  }

  // sanity check: make sure ${branch} isn't currently checked out
  // (otherwise 'git status' will show modified files when this script is done)
  const currentBranch = execSync("git symbolic-ref HEAD", {
    encoding: "utf8",
    stdio: "pipe",
  }).trim();
  if (currentBranch === `refs/heads/${branch}`) {
    fatal(`${branch} must not be checked out`);
  }

  // set up git
  const gitDir = execSync("git rev-parse --git-dir", {
    encoding: "utf8",
    stdio: "pipe",
  }).trim();
  const gitIndexFile = join(gitDir, "index");
  process.env.GIT_DIR = gitDir;
  process.env.GIT_INDEX_FILE = gitIndexFile;
  process.env.GIT_WORK_TREE = dir;

  // stage the files
  tryExec(`cd "${dir}" && git add -Af .`);

  // commit the files
  const parent = execSync(`git rev-parse --verify -q refs/heads/${branch}`, {
    encoding: "utf8",
    stdio: "pipe",
  }).trim();
  const tree = execSync("git write-tree", {
    encoding: "utf8",
    stdio: "pipe",
  }).trim();
  const commitMessage = `Import files from ${dir}`;
  const commit = execSync(
    `echo "${commitMessage}" | git commit-tree ${
      parent ? `-p "${parent}"` : ""
    } ${tree}`,
    {
      encoding: "utf8",
      stdio: "pipe",
    }
  ).trim();

  // update the branch to point to the result
  tryExec(
    `git update-ref refs/heads/${branch} ${commit} -m "commit: ${commitMessage}"`
  );

  log(`committed ${commit} to ${branch}`);
}

main();
